version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.0.0
  aws-ecs: circleci/aws-ecs@1.1.0

jobs:
  test:
    docker:
      - image: circleci/ruby:2.5.3-node-browsers
        environment:
          RELEASE_DATE: "2019-09-25"
      - image: circleci/postgres:9.4
        name: db
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
      - image: selenium/standalone-chrome
        name: chrome
      - image: redis
        name: redis
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}-{{ checksum "yarn.lock" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            gem install bundler:2.0.1
            bundle install --jobs=4 --retry=3 --path vendor/bundle
      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}-{{ checksum "yarn.lock" }}
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load
      - run: bundle exec bin/webpack
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"
            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

workflows:
  nginx_deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          dockerfile: ./containers/nginx/Dockerfile
          region: AWS_REGION
          repo: port-nginx-ecr
          tag: "${CIRCLE_SHA1}"
          extra-build-args: --build-arg RAILS_ENV=production --build-arg RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
          filters:
            branches:
              only: master
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          family: "port-app"
          cluster-name: "port-cluster"
          service-name: "port-servise"
          container-image-name-updates: "container=port-nginx-ecr,tag=${CIRCLE_SHA1}"
          filters:
            branches:
              only: master
  rails_deploy:
    jobs:
      - test
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          dockerfile: ./Dockerfile
          region: AWS_REGION
          repo: port-app-ecr
          tag: "${CIRCLE_SHA1}"
          extra-build-args: --build-arg RAILS_ENV=production --build-arg RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
          requires:
            - test
          filters:
            branches:
              only: master
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          family: "port-app"
          cluster-name: "port-cluster"
          service-name: "port-servise"
          container-image-name-updates: "container=port-rails-ecr,tag=${CIRCLE_SHA1}"
          filters:
            branches:
              only: master
